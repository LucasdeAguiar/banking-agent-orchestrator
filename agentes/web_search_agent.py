from typing import Dict, Any, Optional
from openai import OpenAI
from .base_agent import BaseAgent


class WebSearchAgent(BaseAgent):
    """Agente especializado em busca web para informa√ß√µes banc√°rias atualizadas"""
    
    def __init__(self, client: OpenAI):
        super().__init__(
            nome="Web Search Agent",
            descricao="Busca informa√ß√µes p√∫blicas e atualizadas na internet sobre temas banc√°rios, FGTS, taxas de juros, not√≠cias e regras relevantes para empr√©stimos e consignados"
        )
        self.client = client
    
    def processar(self, pergunta: str, localizacao: Optional[str] = None, **kwargs) -> Dict[str, Any]:
        """
        Processa uma busca web para informa√ß√µes banc√°rias
        
        Args:
            pergunta: Pergunta/consulta para buscar na web
            localizacao: Pa√≠s, cidade ou regi√£o para contextualizar a busca (opcional)
            
        Returns:
            Dict com resultado da busca web
        """
        try:
            # Construir a pergunta com contexto banc√°rio
            pergunta_contextualizada = self._construir_pergunta_contextualizada(pergunta, localizacao)
            
            print(f"[DEBUG] Executando busca web: {pergunta_contextualizada}")
            
            # Executar busca usando gpt-4o-search-preview
            completion = self.client.chat.completions.create(
                model="gpt-4o-search-preview",
                web_search_options={
                    "search_context_size": "low",  # Op√ß√µes: "low", "medium", "high"
                },
                messages=[{
                    "role": "user",
                    "content": pergunta_contextualizada,
                }],
            )
            
            resposta = completion.choices[0].message.content
            
            return {
                "erro": False,
                "pergunta_original": pergunta,
                "pergunta_processada": pergunta_contextualizada,
                "localizacao": localizacao,
                "resultado": resposta,
                "mensagem": self._formatar_resultado_busca(pergunta, resposta)
            }
            
        except Exception as e:
            print(f"[ERRO] Erro na busca web: {e}")
            return {
                "erro": True,
                "pergunta_original": pergunta,
                "mensagem": f"N√£o foi poss√≠vel realizar a busca web. Erro: {str(e)}",
                "resultado": None
            }
    
    def _construir_pergunta_contextualizada(self, pergunta: str, localizacao: Optional[str]) -> str:
        """Constr√≥i pergunta com contexto banc√°rio brasileiro"""
        
        # Contexto base para busca banc√°ria
        contexto_bancario = (
            "Busque informa√ß√µes atualizadas sobre temas banc√°rios, financeiros e do sistema financeiro. "
            "Foque em: Caixa Econ√¥mica Federal, bancos brasileiros, FGTS, empr√©stimos consignados, "
            "taxas de juros, regulamenta√ß√µes banc√°rias, Banco Central do Brasil, e legisla√ß√£o financeira."
        )
        
        # Adicionar localiza√ß√£o se fornecida
        if localizacao:
            contexto_localizacao = f" Contextualize as informa√ß√µes para: {localizacao}."
        else:
            contexto_localizacao = " Foque em informa√ß√µes do Brasil e sistema banc√°rio brasileiro."
        
        pergunta_final = f"{contexto_bancario}{contexto_localizacao}\n\nPergunta: {pergunta}"
        
        return pergunta_final
    
    def _formatar_resultado_busca(self, pergunta: str, resultado: str) -> str:
        """Formata o resultado da busca para apresenta√ß√£o ao usu√°rio"""
        
        return f"""üîç **Busca Web - Informa√ß√µes Atualizadas**

**Consulta:** {pergunta}

**Resultado:**
{resultado}

---
*Informa√ß√µes obtidas atrav√©s de busca web atualizada*"""
    
    def get_tool_definition(self) -> Dict[str, Any]:
        """Retorna a defini√ß√£o da tool para o function calling"""
        return {
            "type": "function",
            "function": {
                "name": "web_search_agent",
                "description": self.descricao,
                "parameters": {
                    "type": "object",
                    "properties": {
                        "pergunta": {
                            "type": "string",
                            "description": "Pergunta ou consulta sobre temas banc√°rios, FGTS, taxas de juros, empr√©stimos ou assuntos financeiros"
                        },
                        "localizacao": {
                            "type": "string",
                            "description": "Pa√≠s, cidade ou regi√£o para contextualizar a busca (opcional, padr√£o: Brasil)",
                            "default": "Brasil"
                        }
                    },
                    "required": ["pergunta"],
                    "additionalProperties": False
                }
            }
        }
    
    def validar_pergunta(self, pergunta: str) -> bool:
        """Valida se a pergunta √© adequada para busca banc√°ria"""
        if not pergunta or not pergunta.strip():
            return False
        
        # Lista de termos relevantes para busca banc√°ria
        termos_bancarios = [
            'banco', 'banc√°rio', 'bancaria', 'caixa', 'fgts', 'empr√©stimo', 'emprestimo',
            'consignado', 'juros', 'taxa', 'cr√©dito', 'credito', 'financiamento',
            'poupan√ßa', 'poupanca', 'conta', 'cart√£o', 'cartao', 'financeiro',
            'financeira', 'central', 'bacen', 'cdb', 'investimento', 'aposentadoria',
            'pens√£o', 'pensao', 'saque', 'transfer√™ncia', 'transferencia', 'pix'
        ]
        
        pergunta_lower = pergunta.lower()
        return any(termo in pergunta_lower for termo in termos_bancarios)
    
    def obter_temas_sugeridos(self) -> list:
        """Retorna lista de temas sugeridos para busca"""
        return [
            "Taxas de juros atuais do Banco Central",
            "Novas regras do FGTS em 2025",
            "Condi√ß√µes de empr√©stimo consignado",
            "Mudan√ßas na legisla√ß√£o banc√°ria",
            "Taxas de financiamento imobili√°rio",
            "Novidades da Caixa Econ√¥mica Federal",
            "Regulamenta√ß√µes sobre PIX",
            "Investimentos em poupan√ßa e CDB",
            "Direitos do consumidor banc√°rio",
            "Portabilidade de cr√©dito consignado"
        ]
